from Crypto.Util.number import getPrime, bytes_to_long as btl
from os import urandom
from secret import FLAG

p = getPrime(1024)
q = getPrime(1024)

n = p*q

salty = btl(urandom(128))

def obfuscate(a, b, c, n):
	l = []
	r = pow(a, 3)*b  + (salty + a)*(lambda x, y, z: (x**2 * y**4 + y**4 * z)*pow(z, y, 0xdeadbeef))(c, b, a) + a * b * c
	while r > 0:
		l.append(r % n)
		r //= n
	return l

flag = obfuscate(btl(FLAG), p, q, n)

e = 65537
c = []

for b in flag:
	c.append(pow(b, e, n))

print(f"{c = }")
print(f"{e = }")
print(f"{n = }")

# c = [16490536304256867294970769515196070073885010351418570635397876296292549042051718000510972564581471525429669998142484289512366621365296622422091920585947792000260411844968637126450163666319883496607622161499409008606419935293117424642778027069326446384637492069171965962879173547178128934782391334597949137686154803329252409331500495388231310312188628236235740475761756469639120181599157522871437481749114256541758600103779028960200224694076096164356358788924472298542224132388944070630552802777247723113416576861087766588583840021612245071817335430822538447864644853050546144924713255431352996507103865591830310488637, 241386654775854382351226680336496640958620336905253563620245282165457829134807056325827821890700915338086925611644232185359264029649992190957429220416033023816711126564797064885443217574189578299940448456681237228464808731913299307230465534766088532957919534460288311824958760095593322199293663244037665306925998635240101710936916513181361208930702677330699897633916197705854690038748741061848939962215550398958660898814916962389967400006109507028417043144964908799833289904403533286112379135969074755737815409640462741371632043525263124089497927872659538940317281327111897075819025715046674332825157423782594470780, 14962642576719516561585870694803812143968320855425521255524487983313126255721293563423248629853997503173704788480801790355581579925154902477257920667825838223105370554633054164871144939539755927448616411190250343784204978274153819192756232033784443314470255333019504331138878005034947121042171839935744753354417690418667294909778748328567237521742130689930441894497040309846271991191652073392653106535081781596970317600508421410766858394601495577471837574339090385466354623422193633494304397691657231586170449962524350637955178350582384767629403294987048736806981706642830115105269520065292907421496408025703362892762, 8048001438092557466184107957695336869905233019152993156413561381064079995138981484610831080417776482666520847935736591234799324052442983363356579318188403169476527354034578810433671930461368313313638782041872037510257497466395210414762388125182924714437605757923902046802344774462205573300251695541211899055695213201947745446390863313048249257590838962091166072650201831693386919109378311036769180456058213130038194349291991233409907408452368119652596593120213379797192485755450251890673595979207570203035650894516310258323714454097364148750550908356355971163555448991556535554551305736396695079951852336585242453687]
# e = 65537
# n = 17197579461196052941362191799616873988909420149940753045548637797505877891091255249948942692134417632331205819196887159577584700623181004454539021241983387211521900469627573707234789376382698821722104462793899699349839225890903962016771730459274524188203861201877996899812610892598763945548678269508650433769654732657727465215470642635197579241501211097713025714436990248840549589564279623229367760922226494138496800630741654053500454350342396053823169592515096964328762416889999183235626318582969089532344490581427562263769940388947025194522157859305662269906902061870909629383227633600055060795092071097799551305623
